$date
	Tue Apr 29 09:14:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_tea_accelerator $end
$var wire 1 ! o_axis_valid_m $end
$var wire 1 " o_axis_ready_s $end
$var wire 64 # o_axis_data_m [63:0] $end
$var reg 64 $ dut_output [63:0] $end
$var reg 64 % expected_output [63:0] $end
$var reg 64 & i_axis_data_s [63:0] $end
$var reg 1 ' i_axis_ready_m $end
$var reg 1 ( i_axis_valid_s $end
$var reg 1 ) i_clk $end
$var reg 128 * i_key [127:0] $end
$var reg 1 + i_rst $end
$var reg 64 , input_data [63:0] $end
$var reg 128 - key [127:0] $end
$var integer 32 . csv_exp0 [31:0] $end
$var integer 32 / csv_exp1 [31:0] $end
$var integer 32 0 csv_input0 [31:0] $end
$var integer 32 1 csv_input1 [31:0] $end
$var integer 32 2 csv_key0 [31:0] $end
$var integer 32 3 csv_key1 [31:0] $end
$var integer 32 4 csv_key2 [31:0] $end
$var integer 32 5 csv_key3 [31:0] $end
$var integer 32 6 fail_count [31:0] $end
$var integer 32 7 pass_count [31:0] $end
$var integer 32 8 test_count [31:0] $end
$var integer 32 9 test_file [31:0] $end
$scope module dut $end
$var wire 64 : i_axis_data_s [63:0] $end
$var wire 1 ' i_axis_ready_m $end
$var wire 1 ( i_axis_valid_s $end
$var wire 1 ) i_clk $end
$var wire 128 ; i_key [127:0] $end
$var wire 1 + i_rst $end
$var wire 64 < o_axis_data_m [63:0] $end
$var parameter 32 = DELTA $end
$var parameter 2 > DONE $end
$var parameter 2 ? IDLE $end
$var parameter 2 @ LOADING $end
$var parameter 2 A PROCESSING $end
$var reg 32 B k0 [31:0] $end
$var reg 32 C k1 [31:0] $end
$var reg 32 D k2 [31:0] $end
$var reg 32 E k3 [31:0] $end
$var reg 32 F new_sum [31:0] $end
$var reg 2 G next_state [1:0] $end
$var reg 1 " o_axis_ready_s $end
$var reg 1 ! o_axis_valid_m $end
$var reg 64 H output_data [63:0] $end
$var reg 5 I round_counter [4:0] $end
$var reg 2 J state [1:0] $end
$var reg 32 K sum [31:0] $end
$var reg 32 L v0 [31:0] $end
$var reg 32 M v0_next [31:0] $end
$var reg 32 N v1 [31:0] $end
$var reg 32 O v1_next [31:0] $end
$upscope $end
$scope begin $unm_blk_18 $end
$var integer 32 P status [31:0] $end
$upscope $end
$scope task compare_outputs $end
$var reg 64 Q dut_out [63:0] $end
$var reg 64 R golden_out [63:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 A
b1 @
b0 ?
b11 >
b10011110001101110111100110111001 =
$end
#0
$dumpvars
bx R
bx Q
bx P
b11011011111010001101001100101111 O
b0 N
b10011110001101110111100110111001 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b10011110001101110111100110111001 F
b0 E
b0 D
b0 C
b0 B
b0 <
bx ;
bx :
b0 9
b0 8
b0 7
b0 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
x+
bx *
1)
x(
x'
bx &
bx %
bx $
b0 #
1"
0!
$end
